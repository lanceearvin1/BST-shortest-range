//change test
import java.util.Queue;

public class Solution
{

//C++ TO JAVA CONVERTER NOTE: The following #define macro was replaced in-line:
//ORIGINAL LINE: #define vt vector<int>
	public final pair<Integer, Integer> shortestRange(Node root)
	{
		vector<vector<Integer>> v = new vector<vector<Integer>>();
		queue<Node> q = new queue<Node>();
		q.push(root);
		while (!q.empty())
		{
			int size = q.size();
			vector<Integer> t = new vector<Integer>();
			while ((size--) != 0)
			{
				root = q.front();
				q.pop();
				t.push_back(root.data);
				if (root.left)
				{
				   q.push(root.left);
				}
				if (root.right)
				{
				   q.push(root.right);
				}
			}
			v.push_back(t);
		}
		int m = v.size();
		int mx = 0;
		int s;
		int e;
		int diff = Integer.MAX_VALUE;
		priority_queue<vector<Integer>,vector<vector<Integer>>,greater<vector<Integer>>> pq = new priority_queue<vector<Integer>,vector<vector<Integer>>,greater<vector<Integer>>>();
		for (int i = 0;i < m;i++)
		{
			pq.push({v[i][0],i,0});
			mx = Math.max(mx,v[i][0]);
		}
		while (!pq.empty())
		{
			int mn = pq.top()[0];
			int i = pq.top()[1];
			int j = pq.top()[2];
			pq.pop();
			if (mx - mn < diff)
			{
				diff = mx - mn;
				s = mn;
				e = mx;
			}
			j++;
			if (j == v[i].size())
			{
			   break;
			}
			mx = Math.max(mx,v[i][j]);
			pq.push({v[i][j],i,j});
		}
		return new pair<Integer, Integer>(s,e);
	}
}
